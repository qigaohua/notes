!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR	= $(CROSS_PREFIX)ar$/;"	m
AR	libconfig++/Makefile	/^AR	= $(CROSS_PREFIX)ar$/;"	m
ARCH	Makefile	/^ARCH		?= linux$/;"	m
ARCH	libconfig++/Makefile	/^ARCH		?= linux$/;"	m
ARCH_INC	Makefile	/^ARCH_INC	:= $(BUILD_DIR)\/$(ARCH).inc$/;"	m
ARCH_INC	libconfig++/Makefile	/^ARCH_INC	:= $(BUILD_DIR)\/$(ARCH).inc$/;"	m
AR_V	Makefile	/^AR_V	= $(AR)$/;"	m
AR_V	libconfig++/Makefile	/^AR_V	= $(AR)$/;"	m
ASCIILINESZ	ini/iniparser.c	16;"	d	file:
BUILD_DIR	Makefile	/^BUILD_DIR	:= $(shell pwd)\/..\/..\/build\/$/;"	m
BUILD_DIR	libconfig++/Makefile	/^BUILD_DIR	:= $(shell pwd)\/..\/..\/build\/$/;"	m
CC	Makefile	/^CC	= $(CROSS_PREFIX)g++$/;"	m
CC	Makefile	/^CC	= $(CROSS_PREFIX)gcc$/;"	m
CC	libconfig++/Makefile	/^CC	= $(CROSS_PREFIX)gcc$/;"	m
CC_V	Makefile	/^CC_V	= $(CC)$/;"	m
CC_V	libconfig++/Makefile	/^CC_V	= $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS	:= -O0 -Wall -Werror -fPIC$/;"	m
CFLAGS	Makefile	/^CFLAGS	:= -g -Wall -Werror -fPIC$/;"	m
CFLAGS	libconfig++/Makefile	/^CFLAGS	:= -O2 -Wall -Werror -fPIC$/;"	m
CFLAGS	libconfig++/Makefile	/^CFLAGS	:= -g -Wall -Werror -fPIC$/;"	m
CFLAGS_JSON	libconfig++/Makefile	/^CFLAGS_JSON	= `pkg-config --cflags jsoncpp`$/;"	m
CFLAGS_LUA	libconfig++/Makefile	/^CFLAGS_LUA	= `pkg-config --cflags lua5.3`$/;"	m
CJSON_CDECL	json/cJSON.h	55;"	d
CJSON_CDECL	json/cJSON.h	72;"	d
CJSON_EXPORT_SYMBOLS	json/cJSON.h	61;"	d
CJSON_HIDE_SYMBOLS	json/cJSON.h	57;"	d
CJSON_NESTING_LIMIT	json/cJSON.h	138;"	d
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buf, const int len, const cJSON_bool fmt)$/;"	f
CJSON_PUBLIC	json/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)$/;"	f
CJSON_PUBLIC	json/cJSON.h	65;"	d
CJSON_PUBLIC	json/cJSON.h	67;"	d
CJSON_PUBLIC	json/cJSON.h	69;"	d
CJSON_PUBLIC	json/cJSON.h	76;"	d
CJSON_PUBLIC	json/cJSON.h	78;"	d
CJSON_STDCALL	json/cJSON.h	56;"	d
CJSON_STDCALL	json/cJSON.h	73;"	d
CJSON_VERSION_MAJOR	json/cJSON.h	83;"	d
CJSON_VERSION_MINOR	json/cJSON.h	84;"	d
CJSON_VERSION_PATCH	json/cJSON.h	85;"	d
COLOR_INC	Makefile	/^COLOR_INC	:= $(BUILD_DIR)\/color.inc$/;"	m
COLOR_INC	libconfig++/Makefile	/^COLOR_INC	:= $(BUILD_DIR)\/color.inc$/;"	m
CONFIG_UTIL_H	config_util.h	24;"	d
CP_V	Makefile	/^CP_V	= $(CP)$/;"	m
CP_V	libconfig++/Makefile	/^CP_V	= $(CP)$/;"	m
CROSS_PREFIX	Makefile	/^CROSS_PREFIX	?=$/;"	m
CROSS_PREFIX	libconfig++/Makefile	/^CROSS_PREFIX	?=$/;"	m
CXX	Makefile	/^CXX	= $(CROSS_PREFIX)g++$/;"	m
CXX	libconfig++/Makefile	/^CXX	= $(CROSS_PREFIX)g++$/;"	m
CXX_V	Makefile	/^CXX_V	= $(CXX)$/;"	m
CXX_V	libconfig++/Makefile	/^CXX_V	= $(CXX)$/;"	m
Config	libconfig++/libgconfig.cpp	/^Config::Config()$/;"	f	class:Config
Config	libconfig++/libgconfig.h	/^class Config : public LuaConfig, public JsonConfig$/;"	c
DICTIONARY_H	ini/dictionary.h	15;"	d
DICTMINSZ	ini/dictionary.c	26;"	d	file:
DICT_INVALID_KEY	ini/dictionary.c	29;"	d	file:
DIRECTORY_SEPARATOR	libconfig++/lua/luatables.cc	47;"	d	file:
DIRECTORY_SEPARATOR	libconfig++/lua/luatables.cc	51;"	d	file:
DIRECTORY_SEPARATOR	lua/luatables.cc	47;"	d	file:
DIRECTORY_SEPARATOR	lua/luatables.cc	51;"	d	file:
ENABLE_LUA	Makefile	/^ENABLE_LUA	= 1$/;"	m
INIPARSER_H	ini/iniparser.h	11;"	d
INI_INVALID_KEY	ini/iniparser.c	17;"	d	file:
INI_SRC_FILES	Android.mk	/^INI_SRC_FILES	:= ini\/iniparser.c ini\/dictionary.c ini\/ini_config.c$/;"	m
Integer	libconfig++/lua/luatables.h	/^		Integer$/;"	e	enum:LuaKey::Type
Integer	lua/luatables.h	/^		Integer$/;"	e	enum:LuaKey::Type
JSON_CONFIG_H	libconfig++/json/json_config.h	19;"	d
JsonConfig	libconfig++/json/json_config.cpp	/^JsonConfig::JsonConfig()$/;"	f	class:JsonConfig
JsonConfig	libconfig++/json/json_config.h	/^class JsonConfig: public Json::Value$/;"	c
L	libconfig++/lua/luatables.h	/^	lua_State *L;$/;"	m	class:LuaStateRef
L	libconfig++/lua/luatables.h	/^	lua_State *L;$/;"	m	class:LuaTable
L	lua/luatables.h	/^	lua_State *L;$/;"	m	class:LuaStateRef
L	lua/luatables.h	/^	lua_State *L;$/;"	m	class:LuaTable
LD	Makefile	/^LD	= $(CROSS_PREFIX)ld$/;"	m
LD	libconfig++/Makefile	/^LD	= $(CROSS_PREFIX)ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS	:= $($(ARCH)_LDFLAGS)$/;"	m
LDFLAGS	libconfig++/Makefile	/^LDFLAGS	:= $($(ARCH)_LDFLAGS)$/;"	m
LDFLAGS_JSON	libconfig++/Makefile	/^LDFLAGS_JSON	= `pkg-config --libs jsoncpp`$/;"	m
LDFLAGS_LUA	libconfig++/Makefile	/^LDFLAGS_LUA	= `pkg-config --libs lua5.3`$/;"	m
LD_V	Makefile	/^LD_V	= $(LD)$/;"	m
LD_V	libconfig++/Makefile	/^LD_V	= $(LD)$/;"	m
LIBCONFIG_H	libconfig.h	23;"	d
LIBGCONFIG_H	libconfig++/libgconfig.h	19;"	d
LIBNAME	Makefile	/^LIBNAME		= libconfig$/;"	m
LIBNAME	libconfig++/Makefile	/^LIBNAME		= libgconfig$/;"	m
LIBRARIES_DIR	Android.mk	/^LIBRARIES_DIR	:= $(LOCAL_PATH)\/..\/$/;"	m
LIBRARIES_DIR	libconfig++/Android.mk	/^LIBRARIES_DIR	:= $(LOCAL_PATH)\/..\/$/;"	m
LINE_COMMENT	ini/iniparser.c	/^    LINE_COMMENT,$/;"	e	enum:_line_status_	file:
LINE_EMPTY	ini/iniparser.c	/^    LINE_EMPTY,$/;"	e	enum:_line_status_	file:
LINE_ERROR	ini/iniparser.c	/^    LINE_ERROR,$/;"	e	enum:_line_status_	file:
LINE_SECTION	ini/iniparser.c	/^    LINE_SECTION,$/;"	e	enum:_line_status_	file:
LINE_UNPROCESSED	ini/iniparser.c	/^    LINE_UNPROCESSED,$/;"	e	enum:_line_status_	file:
LINE_VALUE	ini/iniparser.c	/^    LINE_VALUE$/;"	e	enum:_line_status_	file:
LOCAL_C_INCLUDES	Android.mk	/^LOCAL_C_INCLUDES := $(LOCAL_PATH)$/;"	m
LOCAL_C_INCLUDES	libconfig++/Android.mk	/^LOCAL_C_INCLUDES := $(LOCAL_PATH)$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := libconfig$/;"	m
LOCAL_MODULE	libconfig++/Android.mk	/^LOCAL_MODULE := libconfig++$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	libconfig++/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := libconfig.c $(INI_SRC_FILES)$/;"	m
LOCAL_SRC_FILES	libconfig++/Android.mk	/^LOCAL_SRC_FILES := libconfig++.c$/;"	m
LTYPE	Makefile	/^LTYPE   := debug$/;"	m
LTYPE	Makefile	/^LTYPE   := release$/;"	m
LTYPE	libconfig++/Makefile	/^LTYPE   := debug$/;"	m
LTYPE	libconfig++/Makefile	/^LTYPE   := release$/;"	m
LUATABLES_H	libconfig++/lua/luatables.h	27;"	d
LUATABLES_H	lua/luatables.h	27;"	d
LUA_CONFIG_H	libconfig++/lua/lua_config.h	19;"	d
LuaConfig	libconfig++/lua/lua_config.h	/^class LuaConfig: public LuaTable$/;"	c
LuaConfig	lua/lua_config.cc	/^    LuaConfig(){};$/;"	f	class:LuaConfig	file:
LuaConfig	lua/lua_config.cc	/^class LuaConfig: public LuaTable$/;"	c	file:
LuaKey	libconfig++/lua/luatables.h	/^	LuaKey (const char* key_value) :$/;"	f	struct:LuaKey
LuaKey	libconfig++/lua/luatables.h	/^	LuaKey (int key_value) :$/;"	f	struct:LuaKey
LuaKey	libconfig++/lua/luatables.h	/^struct LuaKey {$/;"	s
LuaKey	lua/luatables.h	/^	LuaKey (const char* key_value) :$/;"	f	struct:LuaKey
LuaKey	lua/luatables.h	/^	LuaKey (int key_value) :$/;"	f	struct:LuaKey
LuaKey	lua/luatables.h	/^struct LuaKey {$/;"	s
LuaStateRef	libconfig++/lua/luatables.h	/^	LuaStateRef () :$/;"	f	class:LuaStateRef
LuaStateRef	libconfig++/lua/luatables.h	/^class LuaStateRef {$/;"	c
LuaStateRef	lua/luatables.h	/^	LuaStateRef () :$/;"	f	class:LuaStateRef
LuaStateRef	lua/luatables.h	/^class LuaStateRef {$/;"	c
LuaTable	libconfig++/lua/luatables.cc	/^LuaTable::LuaTable (const LuaTable &other) :$/;"	f	class:LuaTable
LuaTable	libconfig++/lua/luatables.h	/^	LuaTable () :$/;"	f	class:LuaTable
LuaTable	libconfig++/lua/luatables.h	/^class LuaTable {$/;"	c
LuaTable	lua/luatables.cc	/^LuaTable::LuaTable (const LuaTable &other) :$/;"	f	class:LuaTable
LuaTable	lua/luatables.h	/^	LuaTable () :$/;"	f	class:LuaTable
LuaTable	lua/luatables.h	/^class LuaTable {$/;"	c
LuaTableNode	libconfig++/lua/luatables.h	/^	LuaTableNode() :$/;"	f	class:LuaTableNode
LuaTableNode	libconfig++/lua/luatables.h	/^class LuaTableNode {$/;"	c
LuaTableNode	lua/luatables.h	/^	LuaTableNode() :$/;"	f	class:LuaTableNode
LuaTableNode	lua/luatables.h	/^class LuaTableNode {$/;"	c
MAXVALSZ	ini/dictionary.c	23;"	d	file:
MAX_CONF_ENTRY	config_util.h	46;"	d
NVALS	ini/dictionary.c	362;"	d	file:
OBJS	Makefile	/^OBJS	:= $(OBJS_LIB) $(OBJS_UNIT_TEST)$/;"	m
OBJS	libconfig++/Makefile	/^OBJS	:= $(OBJS_LIB) $(OBJS_UNIT_TEST)$/;"	m
OBJS_INI	Makefile	/^OBJS_INI	= ini\/iniparser.o \\$/;"	m
OBJS_JSON	Makefile	/^OBJS_JSON	= json\/json_config.o \\$/;"	m
OBJS_JSON	libconfig++/Makefile	/^OBJS_JSON	= json\/json_config.o$/;"	m
OBJS_LIB	Makefile	/^OBJS_LIB	= $(LIBNAME).o \\$/;"	m
OBJS_LIB	libconfig++/Makefile	/^OBJS_LIB	= $(LIBNAME).o \\$/;"	m
OBJS_LUA	Makefile	/^OBJS_LUA	= lua\/luatables.o \\$/;"	m
OBJS_LUA	libconfig++/Makefile	/^OBJS_LUA	= lua\/luatables.o \\$/;"	m
OBJS_UNIT_TEST	Makefile	/^OBJS_UNIT_TEST	= test_$(LIBNAME).o$/;"	m
OBJS_UNIT_TEST	libconfig++/Makefile	/^OBJS_UNIT_TEST	= test_$(LIBNAME).o$/;"	m
OUTLIBPATH	Makefile	/^OUTLIBPATH :=$(OUTPUT)\/$(LTYPE)$/;"	m
OUTLIBPATH	Makefile	/^OUTLIBPATH :=\/usr\/local$/;"	m
OUTLIBPATH	libconfig++/Makefile	/^OUTLIBPATH := $(OUTPUT)\/$(LTYPE)$/;"	m
OUTLIBPATH	libconfig++/Makefile	/^OUTLIBPATH := \/usr\/local$/;"	m
OUTPUT	Makefile	/^OUTPUT		?= \/usr\/local$/;"	m
OUTPUT	libconfig++/Makefile	/^OUTPUT		?= \/usr\/local$/;"	m
PATH_MAX	libconfig.h	36;"	d
RM_V	Makefile	/^RM_V	= $(RM)$/;"	m
RM_V	libconfig++/Makefile	/^RM_V	= $(RM)$/;"	m
SHARED	Makefile	/^SHARED	:= -shared$/;"	m
SHARED	libconfig++/Makefile	/^SHARED	:= -shared$/;"	m
STRIP	Makefile	/^STRIP   = $(CROSS_PREFIX)strip$/;"	m
STRIP	libconfig++/Makefile	/^STRIP   = $(CROSS_PREFIX)strip$/;"	m
String	libconfig++/lua/luatables.h	/^		String,$/;"	e	enum:LuaKey::Type
String	lua/luatables.h	/^		String,$/;"	e	enum:LuaKey::Type
TGT	Makefile	/^TGT	:= $(TGT_LIB_A)$/;"	m
TGT	libconfig++/Makefile	/^TGT	:= $(TGT_LIB_A)$/;"	m
TGT_LIB_A	Makefile	/^TGT_LIB_A	= $(LIBNAME).a$/;"	m
TGT_LIB_A	libconfig++/Makefile	/^TGT_LIB_A	= $(LIBNAME).a$/;"	m
TGT_LIB_H	Makefile	/^TGT_LIB_H	= $(LIBNAME).h$/;"	m
TGT_LIB_H	libconfig++/Makefile	/^TGT_LIB_H	= $(LIBNAME).h \\$/;"	m
TGT_LIB_SO	Makefile	/^TGT_LIB_SO	= $(LIBNAME).so$/;"	m
TGT_LIB_SO	libconfig++/Makefile	/^TGT_LIB_SO	= $(LIBNAME).so$/;"	m
TGT_LIB_SO_VER	Makefile	/^TGT_LIB_SO_VER	= $(TGT_LIB_SO).${VER}$/;"	m
TGT_LIB_SO_VER	libconfig++/Makefile	/^TGT_LIB_SO_VER	= $(TGT_LIB_SO).${VER}$/;"	m
TGT_UNIT_TEST	Makefile	/^TGT_UNIT_TEST	= test_$(LIBNAME)$/;"	m
TGT_UNIT_TEST	libconfig++/Makefile	/^TGT_UNIT_TEST	= test_$(LIBNAME)$/;"	m
TYPE_CHARP	config_util.h	29;"	d
TYPE_EMPTY	config_util.h	27;"	d
TYPE_INT	config_util.h	28;"	d
Type	libconfig++/lua/luatables.h	/^	enum Type {$/;"	g	struct:LuaKey
Type	lua/luatables.h	/^	enum Type {$/;"	g	struct:LuaKey
VER	Makefile	/^VER		= $(shell $(VERSION_SH); awk '\/define\\ $(LIBNAME)_version\/{print $$3}' version.h)$/;"	m
VER	libconfig++/Makefile	/^VER		= $(shell $(VERSION_SH); awk '\/define\\ $(LIBNAME)_version\/{print $$3}' version.h)$/;"	m
VERSION_SH	Makefile	/^VERSION_SH	= $(shell pwd)\/version.sh $(LIBNAME)$/;"	m
VERSION_SH	libconfig++/Makefile	/^VERSION_SH	= $(shell pwd)\/version.sh $(LIBNAME)$/;"	m
_CRT_SECURE_NO_DEPRECATE	json/cJSON.c	28;"	d	file:
__WINDOWS__	json/cJSON.h	32;"	d
_dictionary_	ini/dictionary.h	/^typedef struct _dictionary_ {$/;"	s
_line_status_	ini/iniparser.c	/^typedef enum _line_status_ {$/;"	g	file:
acquire	libconfig++/lua/luatables.h	/^	LuaStateRef* acquire() {$/;"	f	class:LuaStateRef
acquire	lua/luatables.h	/^	LuaStateRef* acquire() {$/;"	f	class:LuaStateRef
addSearchPath	libconfig++/lua/luatables.cc	/^void LuaTable::addSearchPath(const char* path) {$/;"	f	class:LuaTable
addSearchPath	lua/luatables.cc	/^void LuaTable::addSearchPath(const char* path) {$/;"	f	class:LuaTable
add_item_to_array	json/cJSON.c	/^static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)$/;"	f	file:
add_item_to_object	json/cJSON.c	/^static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)$/;"	f	file:
allocate	json/cJSON.c	/^    void *(CJSON_CDECL *allocate)(size_t size);$/;"	m	struct:internal_hooks	file:
array	json/cJSON.h	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);$/;"	v
autogen_version_h	libconfig++/version.sh	/^autogen_version_h()$/;"	f
autogen_version_h	version.sh	/^autogen_version_h()$/;"	f
bail	libconfig++/lua/luatables.cc	/^void bail(lua_State *L, const char *msg){$/;"	f
bail	lua/luatables.cc	/^void bail(lua_State *L, const char *msg){$/;"	f
boolean	json/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);$/;"	v
buffer	json/cJSON.c	/^    unsigned char *buffer;$/;"	m	struct:__anon3	file:
buffer_at_offset	json/cJSON.c	263;"	d	file:
buffer_skip_whitespace	json/cJSON.c	/^static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)$/;"	f	file:
c	json/cJSON.h	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *c);$/;"	v
cJSON	json/cJSON.h	/^typedef struct cJSON$/;"	s
cJSON	json/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddArrayToObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddBoolToObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)$/;"	f
cJSON_AddFalseToObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddItemReferenceToArray	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemReferenceToObject	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToArray	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemToObject	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToObjectCS	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddNullToObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddNumberToObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)$/;"	f
cJSON_AddObjectToObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddRawToObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)$/;"	f
cJSON_AddStringToObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)$/;"	f
cJSON_AddTrueToObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_Array	json/cJSON.h	96;"	d
cJSON_ArrayForEach	json/cJSON.h	276;"	d
cJSON_CreateArray	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)$/;"	f
cJSON_CreateArrayReference	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {$/;"	f
cJSON_CreateBool	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool b)$/;"	f
cJSON_CreateDoubleArray	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)$/;"	f
cJSON_CreateFalse	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)$/;"	f
cJSON_CreateFloatArray	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)$/;"	f
cJSON_CreateIntArray	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)$/;"	f
cJSON_CreateNull	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)$/;"	f
cJSON_CreateNumber	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)$/;"	f
cJSON_CreateObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)$/;"	f
cJSON_CreateObjectReference	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)$/;"	f
cJSON_CreateRaw	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)$/;"	f
cJSON_CreateString	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)$/;"	f
cJSON_CreateStringArray	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char **strings, int count)$/;"	f
cJSON_CreateStringReference	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)$/;"	f
cJSON_CreateTrue	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)$/;"	f
cJSON_Delete	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)$/;"	f
cJSON_DeleteItemFromArray	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DeleteItemFromObject	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DeleteItemFromObjectCaseSensitive	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromArray	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DetachItemFromObject	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromObjectCaseSensitive	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemViaPointer	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)$/;"	f
cJSON_Duplicate	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)$/;"	f
cJSON_False	json/cJSON.h	91;"	d
cJSON_GetArrayItem	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)$/;"	f
cJSON_GetArraySize	json/cJSON.c	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)$/;"	f
cJSON_GetErrorPtr	json/cJSON.c	/^CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)$/;"	f
cJSON_GetObjectItem	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetObjectItemCaseSensitive	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetStringValue	json/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {$/;"	f
cJSON_Hooks	json/cJSON.h	/^typedef struct cJSON_Hooks$/;"	s
cJSON_Hooks	json/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_InsertItemInArray	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_Invalid	json/cJSON.h	90;"	d
cJSON_IsReference	json/cJSON.h	100;"	d
cJSON_Minify	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_Minify(char *json)$/;"	f
cJSON_NULL	json/cJSON.h	93;"	d
cJSON_New_Item	json/cJSON.c	/^static cJSON *cJSON_New_Item(const internal_hooks * const hooks)$/;"	f	file:
cJSON_Number	json/cJSON.h	94;"	d
cJSON_Object	json/cJSON.h	97;"	d
cJSON_Parse	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)$/;"	f
cJSON_ParseWithOpts	json/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)$/;"	f
cJSON_Print	json/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)$/;"	f
cJSON_PrintBuffered	json/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)$/;"	f
cJSON_PrintUnformatted	json/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)$/;"	f
cJSON_Raw	json/cJSON.h	98;"	d
cJSON_ReplaceItemInArray	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObject	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObjectCaseSensitive	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_SetIntValue	json/cJSON.h	270;"	d
cJSON_SetNumberHelper	json/cJSON.c	/^CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)$/;"	f
cJSON_SetNumberValue	json/cJSON.h	273;"	d
cJSON_String	json/cJSON.h	95;"	d
cJSON_StringIsConst	json/cJSON.h	101;"	d
cJSON_True	json/cJSON.h	92;"	d
cJSON_Version	json/cJSON.c	/^CJSON_PUBLIC(const char*) cJSON_Version(void)$/;"	f
cJSON__h	json/cJSON.h	24;"	d
cJSON_bool	json/cJSON.h	/^typedef int cJSON_bool;$/;"	t
cJSON_free	json/cJSON.c	/^CJSON_PUBLIC(void) cJSON_free(void *object)$/;"	f
cJSON_malloc	json/cJSON.c	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size)$/;"	f
cJSON_strdup	json/cJSON.c	/^static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)$/;"	f	file:
can_access_at_index	json/cJSON.c	260;"	d	file:
can_read	json/cJSON.c	258;"	d	file:
cannot_access_at_index	json/cJSON.c	261;"	d	file:
case_insensitive_strcmp	json/cJSON.c	/^static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)$/;"	f	file:
cast_away_const	json/cJSON.c	/^static void* cast_away_const(const void* string)$/;"	f	file:
child	json/cJSON.h	/^    struct cJSON *child;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
child	json/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child);$/;"	v
child	json/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child);$/;"	v
cjson_min	json/cJSON.c	1085;"	d	file:
conf_del	libconfig.c	/^void conf_del(struct config *c, const char *key)$/;"	f
conf_dump	libconfig.c	/^void conf_dump(struct config *c)$/;"	f
conf_dump_to_file	libconfig.c	/^void conf_dump_to_file(FILE *f, struct config *c)$/;"	f
conf_get_boolean	libconfig.h	78;"	d
conf_get_double	libconfig.h	77;"	d
conf_get_int	libconfig.h	74;"	d
conf_get_length	libconfig.h	79;"	d
conf_get_string	libconfig.h	75;"	d
conf_load	libconfig.c	/^struct config *conf_load(const char *name)$/;"	f
conf_ops_list	libconfig.c	/^static struct config_ops_list conf_ops_list[] = {$/;"	v	typeref:struct:config_ops_list	file:
conf_save	libconfig.c	/^int conf_save(struct config *c)$/;"	f
conf_set	libconfig.c	/^int conf_set(struct config *c, const char *key, const char *val)$/;"	f
conf_set_string	libconfig.h	76;"	d
conf_unload	libconfig.c	/^void conf_unload(struct config *c)$/;"	f
config	libconfig.h	/^typedef struct config {$/;"	s
config_ops	libconfig.h	/^typedef struct config_ops {$/;"	s
config_ops_list	libconfig.c	/^struct config_ops_list {$/;"	s	file:
config_ops_t	libconfig.h	/^} config_ops_t;$/;"	t	typeref:struct:config_ops
config_t	libconfig.h	/^} config_t;$/;"	t	typeref:struct:config
content	json/cJSON.c	/^    const unsigned char *content;$/;"	m	struct:__anon2	file:
count	libconfig++/lua/luatables.h	/^	unsigned int count;$/;"	m	class:LuaStateRef
count	lua/luatables.h	/^	unsigned int count;$/;"	m	class:LuaStateRef
create	libconfig++/json/json_config.cpp	/^JsonConfig *JsonConfig::create(const char *path)$/;"	f	class:JsonConfig
create	libconfig++/libgconfig.cpp	/^Config *Config::create(string path)$/;"	f	class:Config
create	libconfig++/lua/lua_config.cpp	/^LuaConfig *LuaConfig::create(const char *config)$/;"	f	class:LuaConfig
create	lua/lua_config.cc	/^    static LuaConfig* create(const char *config) {$/;"	f	class:LuaConfig
create_key_stack	libconfig++/lua/luatables.cc	/^void create_key_stack (lua_State *L, std::vector<LuaKey> key_stack) {$/;"	f
create_key_stack	lua/luatables.cc	/^void create_key_stack (lua_State *L, std::vector<LuaKey> key_stack) {$/;"	f
create_reference	json/cJSON.c	/^static cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)$/;"	f	file:
cval	config_util.h	/^        char *cval;$/;"	m	union:int_charp::__anon4
deallocate	json/cJSON.c	/^    void (CJSON_CDECL *deallocate)(void *pointer);$/;"	m	struct:internal_hooks	file:
del	libconfig.h	/^    void (*del)(struct config *c, const char *key);$/;"	m	struct:config_ops
depth	json/cJSON.c	/^    size_t depth; \/* How deeply nested (in arrays\/objects) is the input at the current offset. *\/$/;"	m	struct:__anon2	file:
depth	json/cJSON.c	/^    size_t depth; \/* current nesting depth (for formatted printing) *\/$/;"	m	struct:__anon3	file:
destroy	libconfig++/json/json_config.cpp	/^void JsonConfig::destroy()$/;"	f	class:JsonConfig
destroy	libconfig++/lua/lua_config.cpp	/^void LuaConfig::destroy()$/;"	f	class:LuaConfig
destroy	lua/lua_config.cc	/^    void destroy() {$/;"	f	class:LuaConfig
dictionary	ini/dictionary.h	/^} dictionary ;$/;"	t	typeref:struct:_dictionary_
dictionary_del	ini/dictionary.c	/^void dictionary_del(dictionary * d)$/;"	f
dictionary_dump	ini/dictionary.c	/^void dictionary_dump(dictionary * d, FILE * out)$/;"	f
dictionary_get	ini/dictionary.c	/^char * dictionary_get(dictionary * d, const char * key, char * def)$/;"	f
dictionary_hash	ini/dictionary.c	/^unsigned dictionary_hash(const char * key)$/;"	f
dictionary_new	ini/dictionary.c	/^dictionary * dictionary_new(size_t size)$/;"	f
dictionary_set	ini/dictionary.c	/^int dictionary_set(dictionary * d, const char * key, const char * val)$/;"	f
dictionary_unset	ini/dictionary.c	/^void dictionary_unset(dictionary * d, const char * key)$/;"	f
dump	libconfig.h	/^    void (*dump)(struct config *c, FILE *f);$/;"	m	struct:config_ops
ensure	json/cJSON.c	/^static unsigned char* ensure(printbuffer * const p, size_t needed)$/;"	f	file:
error	json/cJSON.c	/^} error;$/;"	t	typeref:struct:__anon1	file:
exists	libconfig++/lua/luatables.cc	/^bool LuaTableNode::exists() {$/;"	f	class:LuaTableNode
exists	lua/luatables.cc	/^bool LuaTableNode::exists() {$/;"	f	class:LuaTableNode
false	json/cJSON.c	62;"	d	file:
filename	libconfig++/lua/luatables.h	/^	std::string filename;$/;"	m	class:LuaTable
filename	lua/luatables.h	/^	std::string filename;$/;"	m	class:LuaTable
find_backend	libconfig.c	/^static struct config_ops *find_backend(const char *name)$/;"	f	file:
format	json/cJSON.c	/^    cJSON_bool format; \/* is this print a formatted print *\/$/;"	m	struct:__anon3	file:
freeOnZeroRefs	libconfig++/lua/luatables.h	/^	bool freeOnZeroRefs;$/;"	m	class:LuaStateRef
freeOnZeroRefs	lua/luatables.h	/^	bool freeOnZeroRefs;$/;"	m	class:LuaStateRef
free_fn	json/cJSON.h	/^      void (CJSON_CDECL *free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
fromFile	libconfig++/lua/luatables.cc	/^LuaTable LuaTable::fromFile (const char* _filename) {$/;"	f	class:LuaTable
fromFile	lua/luatables.cc	/^LuaTable LuaTable::fromFile (const char* _filename) {$/;"	f	class:LuaTable
fromLuaExpression	libconfig++/lua/luatables.cc	/^LuaTable LuaTable::fromLuaExpression (const char* lua_expr) {$/;"	f	class:LuaTable
fromLuaExpression	lua/luatables.cc	/^LuaTable LuaTable::fromLuaExpression (const char* lua_expr) {$/;"	f	class:LuaTable
fromLuaState	libconfig++/lua/luatables.cc	/^LuaTable LuaTable::fromLuaState (lua_State* L) {$/;"	f	class:LuaTable
fromLuaState	lua/luatables.cc	/^LuaTable LuaTable::fromLuaState (lua_State* L) {$/;"	f	class:LuaTable
g_config	libconfig.c	/^struct config *g_config = NULL;$/;"	v	typeref:struct:config
get	libconfig++/lua/luatables.h	/^	T get() {$/;"	f	class:LuaTableNode
get	libconfig++/lua/luatables.h	/^	T get(const T& def_value) {$/;"	f	class:LuaTableNode
get	lua/luatables.h	/^	T get() {$/;"	f	class:LuaTableNode
get	lua/luatables.h	/^	T get(const T& def_value) {$/;"	f	class:LuaTableNode
getDefault	libconfig++/lua/luatables.cc	/^template<> bool LuaTableNode::getDefault<bool>(const bool &default_value) {$/;"	f	class:LuaTableNode
getDefault	libconfig++/lua/luatables.cc	/^template<> double LuaTableNode::getDefault<double>(const double &default_value) {$/;"	f	class:LuaTableNode
getDefault	libconfig++/lua/luatables.cc	/^template<> float LuaTableNode::getDefault<float>(const float &default_value) {$/;"	f	class:LuaTableNode
getDefault	libconfig++/lua/luatables.cc	/^template<> int LuaTableNode::getDefault<int>(const int &default_value) {$/;"	f	class:LuaTableNode
getDefault	libconfig++/lua/luatables.cc	/^template<> std::string LuaTableNode::getDefault<std::string>(const std::string &default_value) {$/;"	f	class:LuaTableNode
getDefault	lua/luatables.cc	/^template<> bool LuaTableNode::getDefault<bool>(const bool &default_value) {$/;"	f	class:LuaTableNode
getDefault	lua/luatables.cc	/^template<> double LuaTableNode::getDefault<double>(const double &default_value) {$/;"	f	class:LuaTableNode
getDefault	lua/luatables.cc	/^template<> float LuaTableNode::getDefault<float>(const float &default_value) {$/;"	f	class:LuaTableNode
getDefault	lua/luatables.cc	/^template<> int LuaTableNode::getDefault<int>(const int &default_value) {$/;"	f	class:LuaTableNode
getDefault	lua/luatables.cc	/^template<> std::string LuaTableNode::getDefault<std::string>(const std::string &default_value) {$/;"	f	class:LuaTableNode
getKeyStack	libconfig++/lua/luatables.cc	/^std::vector<LuaKey> LuaTableNode::getKeyStack() {$/;"	f	class:LuaTableNode
getKeyStack	lua/luatables.cc	/^std::vector<LuaKey> LuaTableNode::getKeyStack() {$/;"	f	class:LuaTableNode
get_array_item	json/cJSON.c	/^static cJSON* get_array_item(const cJSON *array, size_t index)$/;"	f	file:
get_boolean	libconfig.h	/^    int (*get_boolean)  (struct config *c, ...);$/;"	m	struct:config_ops
get_current_dir	libconfig++/lua/luatables.cc	46;"	d	file:
get_current_dir	libconfig++/lua/luatables.cc	50;"	d	file:
get_current_dir	lua/luatables.cc	46;"	d	file:
get_current_dir	lua/luatables.cc	50;"	d	file:
get_decimal_point	json/cJSON.c	/^static unsigned char get_decimal_point(void)$/;"	f	file:
get_double	libconfig.h	/^    double (*get_double)(struct config *c, ...);$/;"	m	struct:config_ops
get_file_directory	libconfig++/lua/luatables.cc	/^std::string get_file_directory (const char* filename) {$/;"	f
get_file_directory	lua/luatables.cc	/^std::string get_file_directory (const char* filename) {$/;"	f
get_file_suffix	libconfig.c	/^static char *get_file_suffix(const char *name)$/;"	f	file:
get_int	libconfig.h	/^    int (*get_int)      (struct config *c, ...);$/;"	m	struct:config_ops
get_length	libconfig.h	/^    int (*get_length)   (struct config *c, ...);$/;"	m	struct:config_ops
get_object_item	json/cJSON.c	/^static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)$/;"	f	file:
get_string	libconfig.h	/^    char *(*get_string) (struct config *c, ...);$/;"	m	struct:config_ops
global_error	json/cJSON.c	/^static error global_error = { NULL, 0 };$/;"	v	file:
global_hooks	json/cJSON.c	/^static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };$/;"	v	file:
hash	ini/dictionary.h	/^    unsigned     *  hash ;  \/** List of hash values for keys *\/$/;"	m	struct:_dictionary_
hooks	json/cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon2	file:
hooks	json/cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon3	file:
hooks	json/cJSON.h	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);$/;"	v
ini_del	ini/ini_config.c	/^static void ini_del(struct config *c, const char *key)$/;"	f	file:
ini_dump	ini/ini_config.c	/^static void ini_dump(struct config *c, FILE *f)$/;"	f	file:
ini_get_boolean	ini/ini_config.c	/^static int ini_get_boolean(struct config *c, ...)$/;"	f	file:
ini_get_double	ini/ini_config.c	/^static double ini_get_double(struct config *c, ...)$/;"	f	file:
ini_get_int	ini/ini_config.c	/^static int ini_get_int(struct config *c, ...)$/;"	f	file:
ini_get_string	ini/ini_config.c	/^static char *ini_get_string(struct config *c, ...)$/;"	f	file:
ini_load	ini/ini_config.c	/^static int ini_load(struct config *c, const char *name)$/;"	f	file:
ini_ops	ini/ini_config.c	/^struct config_ops ini_ops = {$/;"	v	typeref:struct:config_ops
ini_save	ini/ini_config.c	/^static int ini_save(struct config *c)$/;"	f	file:
ini_set_string	ini/ini_config.c	/^static int ini_set_string(struct config *c, ...)$/;"	f	file:
ini_test	test_libconfig.c	/^static int ini_test(void)$/;"	f	file:
ini_unload	ini/ini_config.c	/^static void ini_unload(struct config *c)$/;"	f	file:
iniparser_dump	ini/iniparser.c	/^void iniparser_dump(dictionary * d, FILE * f)$/;"	f
iniparser_dump_ini	ini/iniparser.c	/^void iniparser_dump_ini(dictionary * d, FILE * f)$/;"	f
iniparser_dumpsection_ini	ini/iniparser.c	/^void iniparser_dumpsection_ini(dictionary * d, char * s, FILE * f)$/;"	f
iniparser_find_entry	ini/iniparser.c	/^int iniparser_find_entry($/;"	f
iniparser_freedict	ini/iniparser.c	/^void iniparser_freedict(dictionary * d)$/;"	f
iniparser_getboolean	ini/iniparser.c	/^int iniparser_getboolean(dictionary * d, const char * key, int notfound)$/;"	f
iniparser_getdouble	ini/iniparser.c	/^double iniparser_getdouble(dictionary * d, const char * key, double notfound)$/;"	f
iniparser_getint	ini/iniparser.c	/^int iniparser_getint(dictionary * d, const char * key, int notfound)$/;"	f
iniparser_getnsec	ini/iniparser.c	/^int iniparser_getnsec(dictionary * d)$/;"	f
iniparser_getseckeys	ini/iniparser.c	/^char ** iniparser_getseckeys(dictionary * d, char * s)$/;"	f
iniparser_getsecname	ini/iniparser.c	/^char * iniparser_getsecname(dictionary * d, int n)$/;"	f
iniparser_getsecnkeys	ini/iniparser.c	/^int iniparser_getsecnkeys(dictionary * d, char * s)$/;"	f
iniparser_getstring	ini/iniparser.c	/^char * iniparser_getstring(dictionary * d, const char * key, char * def)$/;"	f
iniparser_line	ini/iniparser.c	/^static line_status iniparser_line($/;"	f	file:
iniparser_load	ini/iniparser.c	/^dictionary * iniparser_load(const char * ininame)$/;"	f
iniparser_set	ini/iniparser.c	/^int iniparser_set(dictionary * ini, const char * entry, const char * val)$/;"	f
iniparser_unset	ini/iniparser.c	/^void iniparser_unset(dictionary * ini, const char * entry)$/;"	f
init	libconfig++/json/json_config.cpp	/^bool JsonConfig::init(const char *path)$/;"	f	class:JsonConfig
init	libconfig++/lua/lua_config.cpp	/^bool LuaConfig::init(const char *config)$/;"	f	class:LuaConfig
init	lua/lua_config.cc	/^    bool init(const char *config) {$/;"	f	class:LuaConfig	file:
int_charp	config_util.h	/^struct int_charp {$/;"	s
int_value	libconfig++/lua/luatables.h	/^	int int_value;$/;"	m	struct:LuaKey
int_value	lua/luatables.h	/^	int int_value;$/;"	m	struct:LuaKey
internal_free	json/cJSON.c	/^static void CJSON_CDECL internal_free(void *pointer)$/;"	f	file:
internal_free	json/cJSON.c	143;"	d	file:
internal_hooks	json/cJSON.c	/^typedef struct internal_hooks$/;"	s	file:
internal_hooks	json/cJSON.c	/^} internal_hooks;$/;"	t	typeref:struct:internal_hooks	file:
internal_malloc	json/cJSON.c	/^static void * CJSON_CDECL internal_malloc(size_t size)$/;"	f	file:
internal_malloc	json/cJSON.c	142;"	d	file:
internal_realloc	json/cJSON.c	/^static void * CJSON_CDECL internal_realloc(void *pointer, size_t size)$/;"	f	file:
internal_realloc	json/cJSON.c	144;"	d	file:
item	json/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);$/;"	v
item	json/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);$/;"	v
ival	config_util.h	/^        int ival;$/;"	m	union:int_charp::__anon4
js_dump	json/json_config.c	/^static void js_dump(struct config *c, FILE *f)$/;"	f	file:
js_get_boolean	json/json_config.c	/^static int js_get_boolean(struct config *c, ...)$/;"	f	file:
js_get_double	json/json_config.c	/^static double js_get_double(struct config *c, ...)$/;"	f	file:
js_get_int	json/json_config.c	/^static int js_get_int(struct config *c, ...)$/;"	f	file:
js_get_string	json/json_config.c	/^static char *js_get_string(struct config *c, ...)$/;"	f	file:
js_load	json/json_config.c	/^static int js_load(struct config *c, const char *name)$/;"	f	file:
js_set_string	json/json_config.c	/^static int js_set_string(struct config *c, ...)$/;"	f	file:
js_unload	json/json_config.c	/^static void js_unload(struct config *c)$/;"	f	file:
json	json/cJSON.c	/^    const unsigned char *json;$/;"	m	struct:__anon1	file:
json_ops	json/json_config.c	/^struct config_ops json_ops = {$/;"	v	typeref:struct:config_ops
json_test	libconfig++/test_libgconfig.cpp	/^static void json_test()$/;"	f	file:
json_test	test_libconfig.c	/^static int json_test(void)$/;"	f	file:
key	ini/dictionary.h	/^    char        **  key ;   \/** List of string keys *\/$/;"	m	struct:_dictionary_
key	libconfig++/lua/luatables.h	/^	LuaKey key;$/;"	m	class:LuaTableNode
key	lua/luatables.h	/^	LuaKey key;$/;"	m	class:LuaTableNode
keyStackToString	libconfig++/lua/luatables.cc	/^std::string LuaTableNode::keyStackToString() {$/;"	f	class:LuaTableNode
keyStackToString	lua/luatables.cc	/^std::string LuaTableNode::keyStackToString() {$/;"	f	class:LuaTableNode
keys	libconfig++/lua/luatables.cc	/^std::vector<LuaKey> LuaTableNode::keys() {$/;"	f	class:LuaTableNode
keys	lua/luatables.cc	/^std::vector<LuaKey> LuaTableNode::keys() {$/;"	f	class:LuaTableNode
l_push_LuaKey	libconfig++/lua/luatables.cc	/^void l_push_LuaKey (lua_State *L, const LuaKey &key) {$/;"	f
l_push_LuaKey	lua/luatables.cc	/^void l_push_LuaKey (lua_State *L, const LuaKey &key) {$/;"	f
length	json/cJSON.c	/^    size_t length;$/;"	m	struct:__anon2	file:
length	json/cJSON.c	/^    size_t length;$/;"	m	struct:__anon3	file:
length	libconfig++/lua/luatables.cc	/^int LuaTable::length() {$/;"	f	class:LuaTable
length	libconfig++/lua/luatables.cc	/^size_t LuaTableNode::length() {$/;"	f	class:LuaTableNode
length	lua/luatables.cc	/^int LuaTable::length() {$/;"	f	class:LuaTable
length	lua/luatables.cc	/^size_t LuaTableNode::length() {$/;"	f	class:LuaTableNode
line_status	ini/iniparser.c	/^} line_status ;$/;"	t	typeref:enum:_line_status_	file:
load	libconfig.h	/^    int (*load)(struct config *c, const char *name);$/;"	m	struct:config_ops
luaRef	libconfig++/lua/luatables.h	/^	int luaRef;$/;"	m	class:LuaTable
luaRef	lua/luatables.h	/^	int luaRef;$/;"	m	class:LuaTable
luaStateRef	libconfig++/lua/luatables.h	/^	LuaStateRef *luaStateRef;$/;"	m	class:LuaTable
luaStateRef	lua/luatables.h	/^	LuaStateRef *luaStateRef;$/;"	m	class:LuaTable
luaTable	libconfig++/lua/luatables.h	/^	LuaTable *luaTable;$/;"	m	class:LuaTableNode
luaTable	lua/luatables.h	/^	LuaTable *luaTable;$/;"	m	class:LuaTableNode
lua_get_boolean	lua/lua_config.cc	/^static int lua_get_boolean(struct config *c, ...)$/;"	f	file:
lua_get_double	lua/lua_config.cc	/^static double lua_get_double(struct config *c, ...)$/;"	f	file:
lua_get_int	lua/lua_config.cc	/^static int lua_get_int(struct config *c, ...)$/;"	f	file:
lua_get_length	lua/lua_config.cc	/^static int lua_get_length(struct config *c, ...)$/;"	f	file:
lua_get_node	lua/lua_config.cc	/^static LuaTableNode *lua_get_node(struct config *c, struct int_charp *type_list, int cnt)$/;"	f	file:
lua_get_string	lua/lua_config.cc	/^static char *lua_get_string(struct config *c, ...)$/;"	f	file:
lua_load	lua/lua_config.cc	/^static int lua_load(struct config *c, const char *name)$/;"	f	file:
lua_ops	lua/lua_config.cc	/^struct config_ops lua_ops = {$/;"	v	typeref:struct:config_ops
lua_save	lua/lua_config.cc	/^static int lua_save(struct config *c)$/;"	f	file:
lua_test	libconfig++/test_libgconfig.cpp	/^static void lua_test()$/;"	f	file:
lua_test	test_libconfig.c	/^static int lua_test(void)$/;"	f	file:
lua_unload	lua/lua_config.cc	/^static void lua_unload(struct config *c)$/;"	f	file:
main	ini/dictionary.c	/^int main(int argc, char *argv[])$/;"	f
main	libconfig++/test_libgconfig.cpp	/^int main(int argc, char **argv)$/;"	f
main	test_libconfig.c	/^int main(int argc, char **argv)$/;"	f
malloc_fn	json/cJSON.h	/^      void *(CJSON_CDECL *malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
mem_double	ini/dictionary.c	/^static void * mem_double(void * ptr, size_t size)$/;"	f	file:
n	ini/dictionary.h	/^    int             n ;     \/** Number of entries in dictionary *\/$/;"	m	struct:_dictionary_
next	json/cJSON.h	/^    struct cJSON *next;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
noalloc	json/cJSON.c	/^    cJSON_bool noalloc;$/;"	m	struct:__anon3	file:
offset	json/cJSON.c	/^    size_t offset;$/;"	m	struct:__anon2	file:
offset	json/cJSON.c	/^    size_t offset;$/;"	m	struct:__anon3	file:
operator !=	libconfig++/lua/luatables.h	/^	bool operator!=(T value) {$/;"	f	class:LuaTableNode
operator !=	libconfig++/lua/luatables.h	/^bool operator!=(T value, LuaTableNode node) {$/;"	f
operator !=	lua/luatables.h	/^	bool operator!=(T value) {$/;"	f	class:LuaTableNode
operator !=	lua/luatables.h	/^bool operator!=(T value, LuaTableNode node) {$/;"	f
operator <	libconfig++/lua/luatables.h	/^	bool operator<( const LuaKey& rhs ) const {$/;"	f	struct:LuaKey
operator <	lua/luatables.h	/^	bool operator<( const LuaKey& rhs ) const {$/;"	f	struct:LuaKey
operator <<	libconfig++/lua/luatables.h	/^inline std::ostream& operator<<(std::ostream& output, const LuaKey &key) {$/;"	f
operator <<	lua/luatables.h	/^inline std::ostream& operator<<(std::ostream& output, const LuaKey &key) {$/;"	f
operator =	libconfig++/json/json_config.cpp	/^JsonConfig& JsonConfig::operator=(const Json::Value &conf)$/;"	f	class:JsonConfig
operator =	libconfig++/lua/lua_config.cpp	/^LuaConfig& LuaConfig::operator=(const LuaTable &table)$/;"	f	class:LuaConfig
operator =	libconfig++/lua/luatables.cc	/^LuaTable& LuaTable::operator= (const LuaTable &other) {$/;"	f	class:LuaTable
operator =	libconfig++/lua/luatables.h	/^	void operator=(const T &value) {$/;"	f	class:LuaTableNode
operator =	lua/lua_config.cc	/^    LuaConfig& operator=(const LuaTable &table) {$/;"	f	class:LuaConfig	file:
operator =	lua/luatables.cc	/^LuaTable& LuaTable::operator= (const LuaTable &other) {$/;"	f	class:LuaTable
operator =	lua/luatables.h	/^	void operator=(const T &value) {$/;"	f	class:LuaTableNode
operator ==	libconfig++/lua/luatables.h	/^	bool operator==(T value) {$/;"	f	class:LuaTableNode
operator ==	libconfig++/lua/luatables.h	/^bool operator==(T value, LuaTableNode node) {$/;"	f
operator ==	lua/luatables.h	/^	bool operator==(T value) {$/;"	f	class:LuaTableNode
operator ==	lua/luatables.h	/^bool operator==(T value, LuaTableNode node) {$/;"	f
operator T	libconfig++/lua/luatables.h	/^	operator T() {$/;"	f	class:LuaTableNode
operator T	lua/luatables.h	/^	operator T() {$/;"	f	class:LuaTableNode
operator []	libconfig++/lua/luatables.h	/^	LuaTableNode operator[] (const char* key) {$/;"	f	class:LuaTable
operator []	libconfig++/lua/luatables.h	/^	LuaTableNode operator[] (int key) {$/;"	f	class:LuaTable
operator []	libconfig++/lua/luatables.h	/^	LuaTableNode operator[](const char *child_str) {$/;"	f	class:LuaTableNode
operator []	libconfig++/lua/luatables.h	/^	LuaTableNode operator[](int child_index) {$/;"	f	class:LuaTableNode
operator []	lua/luatables.cc	/^LuaTableNode LuaTableNode::operator[](const char *child_str) {$/;"	f	class:LuaTableNode
operator []	lua/luatables.cc	/^LuaTableNode LuaTableNode::operator[](int child_index) {$/;"	f	class:LuaTableNode
operator []	lua/luatables.h	/^	LuaTableNode operator[] (const char* key) {$/;"	f	class:LuaTable
operator []	lua/luatables.h	/^	LuaTableNode operator[] (int key) {$/;"	f	class:LuaTable
ops	libconfig.c	/^    struct config_ops *ops;$/;"	m	struct:config_ops_list	typeref:struct:config_ops_list::config_ops	file:
ops	libconfig.h	/^    struct config_ops *ops;$/;"	m	struct:config	typeref:struct:config::config_ops
orderedSerialize	libconfig++/lua/luatables.cc	/^std::string LuaTable::orderedSerialize() {$/;"	f	class:LuaTable
orderedSerialize	lua/luatables.cc	/^std::string LuaTable::orderedSerialize() {$/;"	f	class:LuaTable
parent	libconfig++/lua/luatables.h	/^	LuaTableNode *parent;$/;"	m	class:LuaTableNode
parent	lua/luatables.h	/^	LuaTableNode *parent;$/;"	m	class:LuaTableNode
parse_array	json/cJSON.c	/^static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_buffer	json/cJSON.c	/^} parse_buffer;$/;"	t	typeref:struct:__anon2	file:
parse_hex4	json/cJSON.c	/^static unsigned parse_hex4(const unsigned char * const input)$/;"	f	file:
parse_number	json/cJSON.c	/^static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_object	json/cJSON.c	/^static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_string	json/cJSON.c	/^static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_value	json/cJSON.c	/^static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
path	libconfig.h	/^    char path[PATH_MAX];$/;"	m	struct:config
popRef	libconfig++/lua/luatables.cc	/^void LuaTable::popRef() {$/;"	f	class:LuaTable
popRef	lua/luatables.cc	/^void LuaTable::popRef() {$/;"	f	class:LuaTable
position	json/cJSON.c	/^    size_t position;$/;"	m	struct:__anon1	file:
prev	json/cJSON.h	/^    struct cJSON *prev;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
print	json/cJSON.c	/^static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)$/;"	f	file:
print_array	json/cJSON.c	/^static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_number	json/cJSON.c	/^static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_object	json/cJSON.c	/^static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_string	json/cJSON.c	/^static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)$/;"	f	file:
print_string_ptr	json/cJSON.c	/^static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)$/;"	f	file:
print_value	json/cJSON.c	/^static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
printbuffer	json/cJSON.c	/^} printbuffer;$/;"	t	typeref:struct:__anon3	file:
priv	libconfig.h	/^    void *priv;$/;"	m	struct:config
pushRef	libconfig++/lua/luatables.cc	/^void LuaTable::pushRef() {$/;"	f	class:LuaTable
pushRef	lua/luatables.cc	/^void LuaTable::pushRef() {$/;"	f	class:LuaTable
query_key_stack	libconfig++/lua/luatables.cc	/^bool query_key_stack (lua_State *L, std::vector<LuaKey> key_stack) {$/;"	f
query_key_stack	lua/luatables.cc	/^bool query_key_stack (lua_State *L, std::vector<LuaKey> key_stack) {$/;"	f
read_file	json/json_config.c	/^static char *read_file(const char *filename)$/;"	f	file:
reallocate	json/cJSON.c	/^    void *(CJSON_CDECL *reallocate)(void *pointer, size_t size);$/;"	m	struct:internal_hooks	file:
referencesGlobal	libconfig++/lua/luatables.h	/^	bool referencesGlobal;$/;"	m	class:LuaTable
referencesGlobal	lua/luatables.h	/^	bool referencesGlobal;$/;"	m	class:LuaTable
release	libconfig++/lua/luatables.h	/^	int release() {$/;"	f	class:LuaStateRef
release	lua/luatables.h	/^	int release() {$/;"	f	class:LuaStateRef
remove	libconfig++/lua/luatables.cc	/^void LuaTableNode::remove() {$/;"	f	class:LuaTableNode
remove	lua/luatables.cc	/^void LuaTableNode::remove() {$/;"	f	class:LuaTableNode
replace_item_in_object	json/cJSON.c	/^static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)$/;"	f	file:
save	libconfig++/lua/lua_config.cpp	/^bool LuaConfig::save()$/;"	f	class:LuaConfig
save	libconfig.h	/^    int (*save)(struct config *c);$/;"	m	struct:config_ops
save	lua/lua_config.cc	/^    bool save() {$/;"	f	class:LuaConfig
serialize	libconfig++/lua/luatables.cc	/^std::string LuaTable::serialize() {$/;"	f	class:LuaTable
serialize	lua/luatables.cc	/^std::string LuaTable::serialize() {$/;"	f	class:LuaTable
serialize_lua	libconfig++/lua/utils/serialize.lua.h	/^const char serialize_lua[] = $/;"	v
serialize_lua	lua/serialize.lua.h	/^const char serialize_lua[] = $/;"	v
set	libconfig++/lua/luatables.cc	/^template<> void LuaTableNode::set<bool>(const bool &value) {$/;"	f	class:LuaTableNode
set	libconfig++/lua/luatables.cc	/^template<> void LuaTableNode::set<double>(const double &value) {$/;"	f	class:LuaTableNode
set	libconfig++/lua/luatables.cc	/^template<> void LuaTableNode::set<float>(const float &value) {$/;"	f	class:LuaTableNode
set	libconfig++/lua/luatables.cc	/^template<> void LuaTableNode::set<std::string>(const std::string &value) {$/;"	f	class:LuaTableNode
set	lua/luatables.cc	/^template<> void LuaTableNode::set<bool>(const bool &value) {$/;"	f	class:LuaTableNode
set	lua/luatables.cc	/^template<> void LuaTableNode::set<double>(const double &value) {$/;"	f	class:LuaTableNode
set	lua/luatables.cc	/^template<> void LuaTableNode::set<float>(const float &value) {$/;"	f	class:LuaTableNode
set	lua/luatables.cc	/^template<> void LuaTableNode::set<std::string>(const std::string &value) {$/;"	f	class:LuaTableNode
set_string	libconfig.h	/^    int (*set_string)(struct config *c, ...);$/;"	m	struct:config_ops
size	ini/dictionary.h	/^    int             size ;  \/** Storage size *\/$/;"	m	struct:_dictionary_
size	json/cJSON.h	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size);$/;"	v
skip_utf8_bom	json/cJSON.c	/^static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)$/;"	f	file:
stackCreateLuaTable	libconfig++/lua/luatables.cc	/^LuaTable LuaTableNode::stackCreateLuaTable() {$/;"	f	class:LuaTableNode
stackCreateLuaTable	lua/luatables.cc	/^LuaTable LuaTableNode::stackCreateLuaTable() {$/;"	f	class:LuaTableNode
stackCreateValue	libconfig++/lua/luatables.cc	/^void LuaTableNode::stackCreateValue() {$/;"	f	class:LuaTableNode
stackCreateValue	lua/luatables.cc	/^void LuaTableNode::stackCreateValue() {$/;"	f	class:LuaTableNode
stackDepth	lua/luatables.h	/^	int stackDepth;$/;"	m	class:LuaTable
stackDepth	lua/luatables.h	/^	int stackDepth;$/;"	m	class:LuaTableNode
stackPushKey	libconfig++/lua/luatables.cc	/^void LuaTableNode::stackPushKey() {$/;"	f	class:LuaTableNode
stackPushKey	lua/luatables.cc	/^void LuaTableNode::stackPushKey() {$/;"	f	class:LuaTableNode
stackQueryTable	libconfig++/lua/luatables.cc	/^LuaTable LuaTableNode::stackQueryTable() {$/;"	f	class:LuaTableNode
stackQueryTable	lua/luatables.cc	/^LuaTable LuaTableNode::stackQueryTable() {$/;"	f	class:LuaTableNode
stackQueryValue	libconfig++/lua/luatables.cc	/^bool LuaTableNode::stackQueryValue() {$/;"	f	class:LuaTableNode
stackQueryValue	lua/luatables.cc	/^bool LuaTableNode::stackQueryValue() {$/;"	f	class:LuaTableNode
stackRestore	libconfig++/lua/luatables.cc	/^void LuaTableNode::stackRestore() {$/;"	f	class:LuaTableNode
stackRestore	lua/luatables.cc	/^void LuaTableNode::stackRestore() {$/;"	f	class:LuaTableNode
stackTop	libconfig++/lua/luatables.h	/^	int stackTop;$/;"	m	class:LuaTableNode
stackTop	lua/luatables.h	/^	int stackTop;$/;"	m	class:LuaTableNode
stack_print	libconfig++/lua/luatables.cc	/^void stack_print (const char *file, int line, lua_State *L) {$/;"	f
stack_print	lua/luatables.cc	/^void stack_print (const char *file, int line, lua_State *L) {$/;"	f
string	json/cJSON.h	/^    char *string;$/;"	m	struct:cJSON
string_value	libconfig++/lua/luatables.h	/^	std::string string_value;$/;"	m	struct:LuaKey
string_value	lua/luatables.h	/^	std::string string_value;$/;"	m	struct:LuaKey
strlwc	ini/iniparser.c	/^static void strlwc(char * s)$/;"	f	file:
strstrip	ini/iniparser.c	/^static void strstrip(char * s)$/;"	f	file:
suffix	libconfig.c	/^    char suffix[32];$/;"	m	struct:config_ops_list	file:
suffix_object	json/cJSON.c	/^static void suffix_object(cJSON *prev, cJSON *item)$/;"	f	file:
true	json/cJSON.c	61;"	d	file:
type	config_util.h	/^    int type;$/;"	m	struct:int_charp
type	json/cJSON.h	/^    int type;$/;"	m	struct:cJSON
type	libconfig++/lua/luatables.h	/^	Type type;$/;"	m	struct:LuaKey
type	lua/luatables.h	/^	Type type;$/;"	m	struct:LuaKey
unload	libconfig.h	/^    void (*unload)(struct config *c);$/;"	m	struct:config_ops
update_offset	json/cJSON.c	/^static void update_offset(printbuffer * const buffer)$/;"	f	file:
utf16_literal_to_utf8	json/cJSON.c	/^static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)$/;"	f	file:
va_arg_type	config_util.h	47;"	d
val	ini/dictionary.h	/^    char        **  val ;   \/** List of string values *\/$/;"	m	struct:_dictionary_
valuedouble	json/cJSON.h	/^    double valuedouble;$/;"	m	struct:cJSON
valueint	json/cJSON.h	/^    int valueint;$/;"	m	struct:cJSON
valuestring	json/cJSON.h	/^    char *valuestring;$/;"	m	struct:cJSON
xstrdup	ini/dictionary.c	/^char * xstrdup(const char * s)$/;"	f
~Config	libconfig++/libgconfig.cpp	/^Config::~Config()$/;"	f	class:Config
~JsonConfig	libconfig++/json/json_config.cpp	/^JsonConfig::~JsonConfig()$/;"	f	class:JsonConfig
~LuaConfig	libconfig++/lua/lua_config.h	/^    virtual ~LuaConfig(){}$/;"	f	class:LuaConfig
~LuaConfig	lua/lua_config.cc	/^    virtual ~LuaConfig(){}$/;"	f	class:LuaConfig
~LuaTable	libconfig++/lua/luatables.cc	/^LuaTable::~LuaTable() {$/;"	f	class:LuaTable
~LuaTable	lua/luatables.cc	/^LuaTable::~LuaTable() {$/;"	f	class:LuaTable
