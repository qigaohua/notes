!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CMD_EXIT	min_heap_timer.h	/^    CMD_EXIT,$/;"	e	enum:minheaptimer_cmd
CMD_HAVE_DATA	min_heap_timer.h	/^    CMD_HAVE_DATA,$/;"	e	enum:minheaptimer_cmd
CMD_OFF	min_heap_timer.h	/^    CMD_OFF = 0,$/;"	e	enum:minheaptimer_cmd
LEFTCHILD	min_heap_timer.h	7;"	d
MAX_EVENTS	min_heap_timer.c	271;"	d	file:
MAX_INT	min_heap_timer.h	5;"	d
MULTI_PTHREAD	min_heap_timer.h	10;"	d
MinHeapAddAdjest	min_heap_timer.c	/^static void MinHeapAddAdjest(minheap_t *mp, uint32_t index)$/;"	f	file:
MinHeapAddNode	min_heap_timer.c	/^int MinHeapAddNode(minheap_t *mp, void *data, unsigned long time_ms)$/;"	f
MinHeapDelAdjuet	min_heap_timer.c	/^static void MinHeapDelAdjuet(minheap_t *mp, uint32_t index)$/;"	f	file:
MinHeapDelNode	min_heap_timer.c	/^int MinHeapDelNode(minheap_t *mp, void **data, unsigned long *time_ms)$/;"	f
MinHeapDestroy	min_heap_timer.c	/^void MinHeapDestroy(minheap_t *mp)$/;"	f
MinHeapInit	min_heap_timer.c	/^minheap_t *MinHeapInit(unsigned int node_num, ProcessFunc func)$/;"	f
MinHeapTimerIsWait	min_heap_timer.c	/^int MinHeapTimerIsWait()$/;"	f
MinHeapTimerLoop	min_heap_timer.c	/^int MinHeapTimerLoop(minheap_t *mp)$/;"	f
PARENT	min_heap_timer.h	6;"	d
ProcessFunc	min_heap_timer.h	/^typedef int (*ProcessFunc)(void *);$/;"	t
ProcessMinHeapNodeData	min_heap_timer.h	/^    ProcessFunc ProcessMinHeapNodeData;$/;"	m	struct:min_heap_s
READER	min_heap_timer.c	269;"	d	file:
RIGHTCHILD	min_heap_timer.h	8;"	d
TellMinHeapTimer	min_heap_timer.c	/^int TellMinHeapTimer(enum minheaptimer_cmd cmd)$/;"	f
WRITER	min_heap_timer.c	270;"	d	file:
__MIN_HEAP_TIMER_H__	min_heap_timer.h	2;"	d
cond	min_heap_timer.h	/^    pthread_cond_t cond;$/;"	m	struct:min_heap_s
data	min_heap_timer.h	/^    void *data;$/;"	m	struct:heap_node_s
get_monotonic	min_heap_timer.c	/^static int get_monotonic(struct timeval *tv)$/;"	f	file:
headindex	min_heap_timer.h	/^    int                  headindex ;$/;"	m	struct:min_heap_s
heap_node_s	min_heap_timer.h	/^typedef struct heap_node_s {$/;"	s
is_wait	min_heap_timer.c	/^atomic32_t is_wait;$/;"	v
lastindex	min_heap_timer.h	/^    int                  lastindex ;$/;"	m	struct:min_heap_s
max_num	min_heap_timer.h	/^    unsigned int        max_num   ;$/;"	m	struct:min_heap_s
min_heap_s	min_heap_timer.h	/^typedef struct min_heap_s {$/;"	s
minheap_node_t	min_heap_timer.h	/^} minheap_node_t ;$/;"	t	typeref:struct:heap_node_s
minheap_t	min_heap_timer.h	/^} minheap_t;$/;"	t	typeref:struct:min_heap_s
minheaptimer_cmd	min_heap_timer.h	/^enum minheaptimer_cmd {$/;"	g
mutex	min_heap_timer.h	/^    pthread_mutex_t mutex;$/;"	m	struct:min_heap_s
node_list	min_heap_timer.h	/^    minheap_node_t   *node_list ;$/;"	m	struct:min_heap_s
pipe_fd	min_heap_timer.c	/^static int pipe_fd[2];$/;"	v	file:
swap	min_heap_timer.c	/^static void swap(minheap_node_t *a, minheap_node_t *b)$/;"	f	file:
time_ms	min_heap_timer.h	/^    unsigned long time_ms;$/;"	m	struct:heap_node_s
