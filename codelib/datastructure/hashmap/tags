!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BKDRHash	hashmap.c	/^static uint32_t BKDRHash(const char *str)$/;"	f	file:
DEBUG	hashmap.c	207;"	d	file:
HLIST_HEAD	list.h	568;"	d
HLIST_HEAD_INIT	list.h	567;"	d
INIT_HLIST_HEAD	list.h	569;"	d
INIT_HLIST_NODE	list.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
LIST_HEAD	list.h	24;"	d
LIST_HEAD_INIT	list.h	22;"	d
NKEYS	hashmap.c	205;"	d	file:
PALIGN	hashmap.c	204;"	d	file:
_LINUX_LIST_H	list.h	2;"	d
__HASH_MAP_H	hashmap.h	2;"	d
__hlist_del	list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_cut_position	list.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_del_entry	list.h	/^static inline void __list_del_entry(struct list_head *entry)$/;"	f
__list_splice	list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f
_hashmap	hashmap.h	/^typedef struct _hashmap {$/;"	s
_item	hashmap.h	/^typedef struct _item {$/;"	s
bucket	hashmap.h	/^    uint32_t bucket;$/;"	m	struct:_hashmap
container_of	list.h	6;"	d
destroy	hashmap.h	/^    void (*destroy)(void *);$/;"	m	struct:_hashmap
epoch_double	hashmap.c	/^static double epoch_double(void)$/;"	f	file:
first	list.h	/^    struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
hash	hashmap.h	/^    uint32_t hash;$/;"	m	struct:_item
hashmap_create	hashmap.c	/^hashmap_t* hashmap_create(uint32_t bucket, void (*destroy)(void *))$/;"	f
hashmap_del	hashmap.c	/^int hashmap_del(hashmap_t *hm, const char *key)$/;"	f
hashmap_destroy	hashmap.c	/^void hashmap_destroy(hashmap_t *hm)$/;"	f
hashmap_get	hashmap.c	/^void *hashmap_get(hashmap_t *hm, const char *key)$/;"	f
hashmap_get_del	hashmap.c	/^void *hashmap_get_del(hashmap_t *hm, const char *key)$/;"	f
hashmap_lookup	hashmap.c	/^static item_t* hashmap_lookup(hashmap_t *hm, const char *key, uint32_t *hash)$/;"	f	file:
hashmap_pt	hashmap.h	/^} hashmap_t, *hashmap_pt;$/;"	t	typeref:struct:_hashmap
hashmap_put	hashmap.c	/^int hashmap_put(hashmap_t *hm, const char *key, void *val)$/;"	f
hashmap_t	hashmap.h	/^} hashmap_t, *hashmap_pt;$/;"	t	typeref:struct:_hashmap
hlist_add_after	list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_fake	list.h	/^static inline void hlist_add_fake(struct hlist_node *n)$/;"	f
hlist_add_head	list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	list.h	660;"	d
hlist_entry_safe	list.h	669;"	d
hlist_for_each	list.h	662;"	d
hlist_for_each_entry	list.h	680;"	d
hlist_for_each_entry_continue	list.h	690;"	d
hlist_for_each_entry_from	list.h	700;"	d
hlist_for_each_entry_safe	list.h	711;"	d
hlist_for_each_safe	list.h	665;"	d
hlist_head	list.h	/^struct hlist_head {$/;"	s
hlist_move_list	list.h	/^static inline void hlist_move_list(struct hlist_head *old,$/;"	f
hlist_node	list.h	/^struct hlist_node {$/;"	s
hlist_unhashed	list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
item_list	hashmap.h	/^    void *item_list;$/;"	m	struct:_hashmap
item_pt	hashmap.h	/^} item_t, *item_pt;$/;"	t	typeref:struct:_item
item_t	hashmap.h	/^} item_t, *item_pt;$/;"	t	typeref:struct:_item
key	hashmap.h	/^    char *key;$/;"	m	struct:_item
list	hashmap.h	/^    struct hlist_node list;$/;"	m	struct:_item	typeref:struct:_item::hlist_node
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_cut_position	list.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	list.h	342;"	d
list_first_entry	list.h	353;"	d
list_first_entry_or_null	list.h	364;"	d
list_for_each	list.h	372;"	d
list_for_each_entry	list.h	410;"	d
list_for_each_entry_continue	list.h	446;"	d
list_for_each_entry_continue_reverse	list.h	460;"	d
list_for_each_entry_from	list.h	473;"	d
list_for_each_entry_reverse	list.h	421;"	d
list_for_each_entry_safe	list.h	484;"	d
list_for_each_entry_safe_continue	list.h	500;"	d
list_for_each_entry_safe_from	list.h	516;"	d
list_for_each_entry_safe_reverse	list.h	531;"	d
list_for_each_prev	list.h	380;"	d
list_for_each_prev_safe	list.h	399;"	d
list_for_each_safe	list.h	389;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_is_last	list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f
list_is_singular	list.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	list.h	434;"	d
list_replace	list.h	/^static inline void list_replace(struct list_head *old,$/;"	f
list_replace_init	list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f
list_rotate_left	list.h	/^static inline void list_rotate_left(struct list_head *head)$/;"	f
list_safe_reset_next	list.h	549;"	d
list_splice	list.h	/^static inline void list_splice(const struct list_head *list,$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_splice_tail	list.h	/^static inline void list_splice_tail(struct list_head *list,$/;"	f
list_splice_tail_init	list.h	/^static inline void list_splice_tail_init(struct list_head *list,$/;"	f
listadd	list.h	/^static inline void listadd(struct list_head *new, struct list_head *head)$/;"	f
main	hashmap.c	/^int main(int argc, char * argv[])$/;"	f
next	list.h	/^    struct hlist_node *next;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	list.h	/^    struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
pprev	list.h	/^    struct hlist_node **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
prev	list.h	/^    struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
up_grow2	hashmap.c	/^static uint32_t up_grow2(uint32_t c)$/;"	f	file:
val	hashmap.h	/^    void *val;$/;"	m	struct:_item
