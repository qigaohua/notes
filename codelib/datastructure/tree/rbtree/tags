!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLACK	rbtree.h	/^    BLACK = 1,$/;"	e	enum:__anon1
BOOL	rbtree.h	/^typedef int BOOL;$/;"	t
Color	rbtree.h	/^} Color;$/;"	t	typeref:enum:__anon1
False	rbtree.h	5;"	d
RED	rbtree.h	/^    RED   = 0,$/;"	e	enum:__anon1
TEST	rbtree.c	916;"	d	file:
True	rbtree.h	6;"	d
Type	rbtree.c	/^typedef struct test_s Type;$/;"	t	typeref:struct:test_s	file:
Type	rbtree.c	/^} Type;$/;"	t	typeref:struct:test_s	file:
Type	rbtree.h	/^typedef unsigned int Type;$/;"	t
__BIN_SEARCH_TREE__	rbtree.h	2;"	d
_red_black_tree	rbtree.h	/^struct _red_black_tree {$/;"	s
a	rbtree.c	/^    char a;$/;"	m	struct:test_s	file:
b	rbtree.c	/^    char *b;$/;"	m	struct:test_s	file:
c	rbtree.c	/^    int c;$/;"	m	struct:test_s	file:
color	rbtree.h	/^    Color  color; $/;"	m	struct:_red_black_tree
data	rbtree.h	/^	Type   data;$/;"	m	struct:_red_black_tree
default_node_free	rbtree.c	/^void default_node_free (void *node)$/;"	f
default_value_cmp	rbtree.c	/^int default_value_cmp(void *d1, void *d2)$/;"	f
default_value_print	rbtree.c	/^void default_value_print(void *d)$/;"	f
example_node_free	rbtree.c	/^void example_node_free(void *d)$/;"	f
example_value_cmp	rbtree.c	/^int example_value_cmp(void *d1, void *d2)$/;"	f
example_value_print	rbtree.c	/^void example_value_print(void *d)$/;"	f
lchild	rbtree.h	/^	rbt_t  *lchild;$/;"	m	struct:_red_black_tree
main	rbtree.c	/^int main ()$/;"	f
node_free	rbtree.c	/^static value_handle node_free = default_node_free;$/;"	v	file:
node_info_print	rbtree.c	/^void node_info_print(rbt_pt node)$/;"	f
node_value	rbtree.c	108;"	d	file:
parent	rbtree.h	/^    rbt_t  *parent;$/;"	m	struct:_red_black_tree
rbnode_is_black	rbtree.h	10;"	d
rbnode_is_red	rbtree.h	9;"	d
rbnode_parent	rbtree.h	14;"	d
rbnode_set_black	rbtree.h	11;"	d
rbnode_set_red	rbtree.h	12;"	d
rbt_new_node	rbtree.c	/^rbt_pt rbt_new_node (Type d, Color color)$/;"	f
rbt_pt	rbtree.h	/^typedef struct _red_black_tree rbt_t, *rbt_pt;$/;"	t	typeref:struct:
rbt_t	rbtree.h	/^typedef struct _red_black_tree rbt_t, *rbt_pt;$/;"	t	typeref:struct:_red_black_tree
rbtree_delete_fixup	rbtree.c	/^int rbtree_delete_fixup(rbt_pt *root, rbt_pt node, rbt_pt parent)$/;"	f
rbtree_for_cmp	rbtree.c	/^static rbt_pt rbtree_for_cmp(rbt_pt *root, Type data)$/;"	f	file:
rbtree_for_delete	rbtree.c	/^int rbtree_for_delete(rbt_pt *root, Type data)$/;"	f
rbtree_for_inorder	rbtree.c	/^void rbtree_for_inorder(rbt_pt root)$/;"	f
rbtree_for_insert	rbtree.c	/^int rbtree_for_insert(rbt_pt *root, Type data)$/;"	f
rbtree_for_postorder	rbtree.c	/^void rbtree_for_postorder(rbt_pt root)$/;"	f
rbtree_for_preorder	rbtree.c	/^void rbtree_for_preorder(rbt_pt root)$/;"	f
rbtree_insert_fixup	rbtree.c	/^int rbtree_insert_fixup(rbt_pt *root, rbt_pt node)$/;"	f
rbtree_left_rotate	rbtree.c	/^static void rbtree_left_rotate(rbt_pt *root, rbt_pt x)$/;"	f	file:
rbtree_max_node	rbtree.c	/^rbt_pt rbtree_max_node(rbt_pt node)$/;"	f
rbtree_min_node	rbtree.c	/^rbt_pt rbtree_min_node(rbt_pt node)$/;"	f
rbtree_predecessor	rbtree.c	/^rbt_pt rbtree_predecessor(rbt_pt node)$/;"	f
rbtree_print	rbtree.c	17;"	d	file:
rbtree_print	rbtree.c	20;"	d	file:
rbtree_right_rotate	rbtree.c	/^static void rbtree_right_rotate(rbt_pt *root, rbt_pt y)$/;"	f	file:
rbtree_search	rbtree.c	/^rbt_pt rbtree_search (rbt_pt *root, Type data)$/;"	f
rbtree_set_cmp	rbtree.c	/^void rbtree_set_cmp (value_comple func)$/;"	f
rbtree_set_free	rbtree.c	/^void rbtree_set_free (value_handle func)$/;"	f
rbtree_set_print	rbtree.c	/^void rbtree_set_print (value_handle func)$/;"	f
rbtree_successor	rbtree.c	/^rbt_pt rbtree_successor(rbt_pt node)$/;"	f
rchild	rbtree.h	/^    rbt_t  *rchild;$/;"	m	struct:_red_black_tree
test_s	rbtree.c	/^typedef struct test_s {$/;"	s	file:
value_cmp	rbtree.c	/^static value_comple value_cmp = default_value_cmp;$/;"	v	file:
value_comple	rbtree.h	/^typedef int (*value_comple)(void *, void*);$/;"	t
value_handle	rbtree.h	/^typedef void (*value_handle)(void *);$/;"	t
value_print	rbtree.c	/^static value_handle value_print = default_value_print;$/;"	v	file:
